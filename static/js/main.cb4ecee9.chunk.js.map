{"version":3,"sources":["serviceWorker.ts","components/Square/index.tsx","components/Board/index.tsx","utils/calculateWinner.ts","Game.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Square","props","className","onClick","value","Board","renderSquare","i","squares","calculateWinner","winner","forEach","line","index","a","b","c","Game","status","React","useState","Array","fill","history","setHistory","nextStep","setNextStep","stepNumber","setStepNumber","currentSquares","movesHistory","map","desc","key","step","thatTimeHistory","slice","length","newSquares","concat","handleClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCJSC,EANA,SAACC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAAS,kBAAMF,EAAME,YAAYF,EAAMG,QC0B3DC,EA5BD,SAACJ,GACX,IAAMK,EAAe,SAACC,GAClB,OACI,kBAAC,EAAD,CAAQH,MAAOH,EAAMO,QAAQD,GAAIJ,QAAS,kBAAMF,EAAME,QAAQI,OAItE,OACI,6BACI,yBAAKL,UAAU,aACVI,EAAa,GACbA,EAAa,GACbA,EAAa,IAElB,yBAAKJ,UAAU,aACVI,EAAa,GACbA,EAAa,GACbA,EAAa,IAElB,yBAAKJ,UAAU,aACVI,EAAa,GACbA,EAAa,GACbA,EAAa,MC7BjBG,EAAkB,SAACD,GAC1B,IAWEE,EAAwB,KAU5B,MArBgB,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAKLC,SAAQ,SAACC,EAAMC,GAAW,IAAD,cACTD,EADS,GACpBE,EADoB,KACjBC,EADiB,KACdC,EADc,KAEvBR,EAAQM,IAAMN,EAAQM,KAAON,EAAQO,IAAMP,EAAQM,KAAON,EAAQQ,KAClEN,EAASF,EAAQM,OAKlBJ,GC0CIO,EA5DF,WAAO,IAqCZC,EArCW,EACeC,IAAMC,SAAqB,CAAC,CAACZ,QAASa,MAAM,GAAGC,KAAK,SADnE,mBACRC,EADQ,KACCC,EADD,OAEiBL,IAAMC,UAAkB,GAFzC,mBAERK,EAFQ,KAEEC,EAFF,OAGqBP,IAAMC,SAAiB,GAH5C,mBAGRO,EAHQ,KAGIC,EAHJ,KAyBTC,EAA2BN,EAAQI,GACnCjB,EAAwBD,EAAgBoB,EAAerB,SAEvDsB,EAAeP,EAAQQ,KAAI,SAACvB,EAASK,GACvC,IAAMmB,EAAenB,EAAQ,eAAiBA,EAAQ,mBACtD,OACI,wBAAIoB,IAAKpB,GACL,4BAAQV,QAAS,kBAZzByB,EADcM,EAa0BrB,QAXxCa,EAAaQ,EAAO,IAAO,GAFd,IAACA,IAamCF,OAYrD,OALId,EADAR,EACS,WAAaA,EAEb,wBAA0Be,EAAW,IAAM,KAIpD,yBAAKvB,UAAU,QACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CACIM,QAASqB,EAAerB,QACxBL,QAAS,SAACI,GAAD,OA3CL,SAACA,GACjB,IAAM4B,EAAkBZ,EAAQa,MAAM,EAAGT,EAAa,GAChDE,EAA2BM,EAAgBA,EAAgBE,OAAS,GAC1E,IAAKR,EAAerB,QAAQD,KAAOE,EAAgBoB,EAAerB,SAAU,CACxE,IAAM8B,EAAaT,EAAerB,QAAQ4B,QAC1CE,EAAW/B,GAAKkB,EAAW,IAAM,IACjCD,EAAWW,EAAgBI,OAAO,CAAC,CAAC/B,QAAS8B,MAC7CZ,GAAaD,GACbG,EAAcD,EAAa,IAmCKa,CAAYjC,OAG5C,yBAAKL,UAAU,aACX,6BAAMgB,GACN,4BAAKY,MCrDrBW,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SLqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cb4ecee9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\ninterface Props {\n    value: string;\n    onClick: () => void;\n}\n\n// Square is called a controlled component. --> since all its rendering value and event handlers are controlled by its parent level component.\nconst Square = (props: Props) => {\n    return (\n        <button className=\"square\" onClick={() => props.onClick()}>{props.value}</button>\n    );\n};\n\nexport default Square;\n","import React from 'react';\nimport Square from '../Square/index';\n\ninterface Props {\n    squares: Array<string>;\n    onClick: (i: number) => void;\n}\n\nconst Board = (props: Props) => {\n    const renderSquare = (i: number) => {\n        return (\n            <Square value={props.squares[i]} onClick={() => props.onClick(i)} />\n        );\n    }\n\n    return (\n        <div>\n            <div className=\"board-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n            </div>\n        </div>\n    );\n};\n\nexport default Board;\n","// the winner check function for this game.\r\nexport const calculateWinner = (squares: Array<string>) : string | null => {\r\n      const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n\r\n    let winner: string | null = null;\r\n\r\n    lines.forEach((line, index) => {\r\n        const [a, b, c] = line;\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            winner = squares[a];\r\n            return;\r\n        }\r\n    });\r\n\r\n    return winner;\r\n}","import React from 'react';\r\nimport Board from './components/Board/index';\r\nimport ISquares from './model/squares';\r\nimport { calculateWinner } from './utils/calculateWinner';\r\n\r\nconst Game = () => {\r\n    const [history, setHistory] = React.useState<ISquares[]>([{squares: Array(9).fill(null)}]);\r\n    const [nextStep, setNextStep] = React.useState<boolean>(false);\r\n    const [stepNumber, setStepNumber] = React.useState<number>(0);\r\n\r\n    // Game component gets complete controll for Board component.\r\n    const handleClick = (i: number) => {\r\n        const thatTimeHistory = history.slice(0, stepNumber + 1);\r\n        const currentSquares: ISquares = thatTimeHistory[thatTimeHistory.length - 1];\r\n        if (!currentSquares.squares[i] && !calculateWinner(currentSquares.squares)) {\r\n            const newSquares = currentSquares.squares.slice();\r\n            newSquares[i] = nextStep ? 'X' : 'O';\r\n            setHistory(thatTimeHistory.concat([{squares: newSquares}]));\r\n            setNextStep(!nextStep);\r\n            setStepNumber(stepNumber + 1);\r\n        }\r\n    }\r\n\r\n    // function used to do time travel\r\n    const goBackTo = (step: number) => {\r\n        setStepNumber(step);\r\n        setNextStep((step % 2) === 1);\r\n    }\r\n\r\n    // render necessary variables\r\n    const currentSquares: ISquares = history[stepNumber];\r\n    const winner: string | null = calculateWinner(currentSquares.squares);\r\n\r\n    const movesHistory = history.map((squares, index) => {\r\n        const desc: string = index ? 'Go to move #' + index : 'Go to game start';\r\n        return (\r\n            <li key={index}>\r\n                <button onClick={() => goBackTo(index)}>{desc}</button>\r\n            </li>\r\n        );\r\n    })\r\n\r\n    let status: string;\r\n    if (winner) {\r\n        status = 'Winner: ' + winner;\r\n    } else {\r\n        status = 'Next step player is ' + (nextStep ? 'X' : 'O');\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board \r\n                    squares={currentSquares.squares}\r\n                    onClick={(i: number) => handleClick(i)}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div>{status}</div>\r\n                <ol>{movesHistory}</ol>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './Game';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}